import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import sys
import re

plt.rc('xtick',labelsize=15)
plt.rc('ytick',labelsize=15)

#Plot the training data and model generated by PerceptronTest.hs
#Assumes n=3 (the number of dimensions)
#USAGE:
# First compile and run PerceptronTest.hs
# Then, pipe its output (e.g., 'perceptron_out.txt') as input to this program.
# Result is in 'perceptron.png'

t = []
read_training_set = False
for line in sys.stdin:
    if "Model" in line:
        read_training_set = False
        line = re.sub('Model: \(\[', '', line)
        line = re.sub('[\]\)]', '', line)
        [x1,x2,x3,b] = line.split(',')
        model = (float(x1),float(x2),float(x3),float(b))
    if read_training_set:
        [x1,x2,x3,y] = line.split(',')
        if y == 'True\n': label = True
        else: label = False
        t.append((float(x1),float(x2),float(x3),label))
    if "Training Set" in line: read_training_set = True

#plot data
x1_true = [x[0] for x in t if x[3]]
x1_false = [x[0] for x in t if not x[3]]
x2_true = [x[1] for x in t if x[3]]
x2_false = [x[1] for x in t if not x[3]]
x3_true = [x[2] for x in t if x[3]]
x3_false = [x[2] for x in t if not x[3]]

[w1,w2,w3,b] = model

xx, yy = np.meshgrid(np.arange(-0.9,0.9,0.01), np.arange(-0.9,0.9,0.01))
z = (-w1*xx - w2*yy - b) * 1./w3

#plot the plane
#(cf. https://stackoverflow.com/questions/36060933/matplotlib-plot-a-plane-and-points-in-3d-simultaneously)
plt3d = plt.figure().gca(projection='3d')
plt3d.plot_surface(xx, yy, z, alpha=0.2)

#plot the points
ax = plt.gca()
ax.set_xlim([-1,1])
ax.set_ylim([-1,1])
ax.set_zlim([-1,1])
ax.hold(True)
ax.scatter(x1_true, x2_true, x3_true, c='g', s=100, marker='o')
ax.scatter(x1_false, x2_false, x3_false, c='m', s=100, marker='^')

#plt.axis('off')
plt.savefig("perceptron.png", bbox_inches='tight')
