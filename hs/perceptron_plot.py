import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
import sys
import re

plt.rc('xtick',labelsize=15)
plt.rc('ytick',labelsize=15)

#Plot the training data and model generated by PerceptronTest.hs
#Assumes n=2 (the number of dimensions)
#USAGE:
# First compile and run PerceptronTest.hs
# Then, pipe its output (e.g., 'perceptron_out.txt') as input to this program.
# Result is in 'perceptron.png'

t = []
read_training_set = False
for line in sys.stdin:
    if "Model" in line:
        read_training_set = False
        line = re.sub('Model: \(\[', '', line)
        line = re.sub('[\]\)]', '', line)
        [x1,x2,b] = line.split(',')
        model = (float(x1),float(x2),float(b))
    if read_training_set:
        [x1,x2,y] = line.split(',')
        if y == 'True\n': label = True
        else: label = False
        t.append((float(x1),float(x2),label))
    if "Training Set" in line: read_training_set = True

#plot data
x1_true = [x[0] for x in t if x[2]]
x1_false = [x[0] for x in t if not x[2]]
x2_true = [x[1] for x in t if x[2]]
x2_false = [x[1] for x in t if not x[2]]
plt.plot(x1_true, x2_true, 'go', markersize=20, markeredgecolor='g')
plt.plot(x1_false, x2_false, 'm^', markersize=20, markeredgecolor='m')

#plot model
[w1,w2,b] = model
x = np.arange(-1.0, 1.0, 0.01)
s = (-w1/w2)*x - b/w2
plt.plot(x, s, 'k', linewidth=8)

plt.axis('off')
plt.grid(False)
plt.savefig("perceptron.png", bbox_inches='tight')
